import{p as g,aH as w,G as L}from"./three.module-CrM3Sdgj.js";import{L as P}from"./LoaderBase-CVSPpjX2.js";import{r as m}from"./readMagicBytes-Da5ueiou.js";import{B as T}from"./B3DMLoader-aPf5svSz.js";import{P as b}from"./PNTSLoader-BKmvYx0Z.js";import{I as M}from"./I3DMLoader-uk6OaXCg.js";class y extends P{parse(s){const o=new DataView(s),h=m(o);console.assert(h==="cmpt",'CMPTLoader: The magic bytes equal "cmpt".');const p=o.getUint32(4,!0);console.assert(p===1,'CMPTLoader: The version listed in the header is "1".');const i=o.getUint32(8,!0);console.assert(i===s.byteLength,"CMPTLoader: The contents buffer length listed in the header matches the file.");const c=o.getUint32(12,!0),n=[];let t=16;for(let r=0;r<c;r++){const e=new DataView(s,t,12),a=m(e),l=e.getUint32(4,!0),f=e.getUint32(8,!0),u=new Uint8Array(s,t,f);n.push({type:a,buffer:u,version:l}),t+=f}return{version:p,tiles:n}}}class D extends y{constructor(s=w){super(),this.manager=s,this.adjustmentTransform=new g}parse(s){const o=super.parse(s),h=this.manager,p=this.adjustmentTransform,i=[];for(const c in o.tiles){const{type:n,buffer:t}=o.tiles[c];switch(n){case"b3dm":{const r=t.slice(),e=new T(h);e.workingPath=this.workingPath,e.fetchOptions=this.fetchOptions,e.adjustmentTransform.copy(p);const a=e.parse(r.buffer);i.push(a);break}case"pnts":{const r=t.slice(),e=new b(h);e.workingPath=this.workingPath,e.fetchOptions=this.fetchOptions;const a=e.parse(r.buffer);i.push(a);break}case"i3dm":{const r=t.slice(),e=new M(h);e.workingPath=this.workingPath,e.fetchOptions=this.fetchOptions,e.adjustmentTransform.copy(p);const a=e.parse(r.buffer);i.push(a);break}}}return Promise.all(i).then(c=>{const n=new L;return c.forEach(t=>{n.add(t.scene)}),{tiles:c,scene:n}})}}export{D as C};
